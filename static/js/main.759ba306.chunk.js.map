{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","marginTop","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","App","classes","useState","expanded","setExpanded","userData","setUserData","isLoading","setIsLoading","a","fetch","res","json","data","results","console","error","useEffect","fetchData","Grid","container","alignItems","justify","direction","className","speed","width","viewBox","foregroundColor","style","x","y","rx","ry","cx","cy","r","Card","CardMedia","image","picture","large","title","CardHeader","Avatar","aria-label","name","first","action","IconButton","clsx","onClick","aria-expanded","last","subheader","login","username","Collapse","in","timeout","unmountOnExit","CardContent","item","email","cell","location","street","city","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.759ba306.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport Collapse from '@material-ui/core/Collapse';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport { red } from '@material-ui/core/colors';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport MailIcon from '@material-ui/icons/Mail';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport LocationIcon from '@material-ui/icons/LocationOn';\nimport Grid from '@material-ui/core/Grid';\nimport ContentLoader from 'react-content-loader';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport './App.css';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {marginTop: '40px' },\n  media: {\n    height: '100px',\n    paddingTop: '56.25%' \n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest\n    })\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)'\n  },\n  avatar: {\n    backgroundColor: red[500]\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [expanded, setExpanded] = useState(false);\n  const [userData, setUserData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  async function fetchData() {\n    try {\n      let res = await fetch('https://randomuser.me/api');\n      let data = await res.json();\n      setUserData(data.results[0]);\n      setIsLoading(false);\n    } catch (er) {\n      console.error('error', er);\n    }\n  }\n  function refresh (){\n    setIsLoading(true);\n    fetchData();\n  }\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        let res = await fetch('https://randomuser.me/api');\n        let data = await res.json();\n        setUserData(data.results[0]);\n        setIsLoading(false);\n      } catch (er) {\n        console.error('error', er);\n      }\n    }\n    fetchData();\n  }, []);\n  return (\n    <Grid container alignItems=\"center\" justify=\"center\" direction=\"column\" className={classes.root} >\n         \n      {isLoading ? (\n        <ContentLoader\n          speed={2}\n          width={400}\n          height={300}\n          viewBox=\"0 0 400 300\"\n          backgroundColor=\"#f3f3f3\"\n          foregroundColor=\"#ecebeb\"\n          style={{ marginLeft: '180px' }}>\n          <rect x=\"-1\" y=\"2\" rx=\"0\" ry=\"0\" width=\"200\" height=\"211\" />\n          <circle cx=\"35\" cy=\"254\" r=\"26\" />\n          <rect x=\"75\" y=\"238\" rx=\"0\" ry=\"0\" width=\"114\" height=\"10\" />\n          <rect x=\"75\" y=\"259\" rx=\"0\" ry=\"0\" width=\"114\" height=\"11\" />\n        </ContentLoader>\n      ) : (\n        <Card >\n          <CardMedia className={classes.media} image={userData.picture.large} title=\"Paella dish\" />\n          <CardHeader\n            avatar={\n              <Avatar aria-label=\"recipe\" className={classes.avatar}>\n                {userData.name.first[0]}\n              </Avatar>\n            }\n            action={\n              <IconButton\n                className={clsx(classes.expand, {\n                  [classes.expandOpen]: expanded\n                })}\n                onClick={handleExpandClick}\n                aria-expanded={expanded}\n                aria-label=\"show more\">\n                <ExpandMoreIcon />\n              </IconButton>\n            }\n            title={userData.name.first + ' ' + userData.name.last}\n            subheader={userData.login.username}\n          />\n\n          <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n            <CardContent>\n              <Grid container direction=\"column\" alignItems=\"stretch\">\n                <Grid item>\n                  <IconButton aria-label=\"add to favorites\">\n                    <MailIcon />\n                  </IconButton>\n                  {userData.email}\n                </Grid>\n                <Grid item>\n                  <IconButton aria-label=\"share\">\n                    <PhoneIcon />\n                  </IconButton>\n                  {userData.cell}\n                </Grid>\n                <Grid item>\n                  <IconButton aria-label=\"share\">\n                    <LocationIcon />\n                  </IconButton>\n                  {userData.location.street.name + ', ' + userData.location.city}\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Collapse>\n        </Card>\n                     \n       \n      )}\n      <IconButton aria-label=\"share\">\n        < RefreshIcon onClick={refresh}/>\n      </IconButton>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}